/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Transcoder that encodes values as JSON strings.
 */
export class JsonStorageTranscoder {
    /**
     * @param {?} value
     * @return {?}
     */
    encode(value) {
        return JSON.stringify(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    decode(value) {
        try {
            return JSON.parse(value);
        }
        catch (error) {
            return undefined;
        }
    }
}
/**
 * Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way.
 */
export class StringStorageTranscoder {
    /**
     * @param {?} value
     * @return {?}
     */
    encode(value) {
        return value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    decode(value) {
        return value;
    }
}
/**
 * Transcoder that encodes/decodes `boolean` values.
 */
export class BooleanStorageTranscoder {
    /**
     * @param {?} value
     * @return {?}
     */
    encode(value) {
        return value.toString();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    decode(value) {
        if (value === 'true') {
            return true;
        }
        if (value === 'false') {
            return false;
        }
        return undefined;
    }
}
/**
 * Transcoder that encodes/decodes `number` values.
 */
export class NumberStorageTranscoder {
    /**
     * @param {?} value
     * @return {?}
     */
    encode(value) {
        return value.toString();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    decode(value) {
        /** @type {?} */
        const parsedNumber = Number(value);
        return Number.isFinite(parsedNumber) ? parsedNumber : undefined;
    }
}
/**
 * A set of storage transcoders.
 * @type {?}
 */
export const StorageTranscoders = {
    /**
     * Transcoder that encodes values as JSON strings.
     */
    JSON: (/** @type {?} */ (new JsonStorageTranscoder())),
    /**
     * Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way.
     */
    STRING: (/** @type {?} */ (new StringStorageTranscoder())),
    /**
     * Transcoder that encodes/decodes `boolean` values.
     */
    BOOLEAN: (/** @type {?} */ (new BooleanStorageTranscoder())),
    /**
     * Transcoder that encodes/decodes `number` values.
     */
    NUMBER: (/** @type {?} */ (new NumberStorageTranscoder()))
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS10cmFuc2NvZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC13ZWJzdG9yYWdlLXNlcnZpY2UvIiwic291cmNlcyI6WyJzcmMvc3RvcmFnZS10cmFuc2NvZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0EsTUFBTSxPQUFPLHFCQUFxQjs7Ozs7SUFFdkIsTUFBTSxDQUFDLEtBQVU7UUFDcEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRU0sTUFBTSxDQUFDLEtBQWE7UUFDdkIsSUFBSTtZQUNBLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM1QjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ1osT0FBTyxTQUFTLENBQUM7U0FDcEI7SUFDTCxDQUFDO0NBRUo7Ozs7QUFHRCxNQUFNLE9BQU8sdUJBQXVCOzs7OztJQUN6QixNQUFNLENBQUMsS0FBYTtRQUN2QixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOzs7OztJQUVNLE1BQU0sQ0FBQyxLQUFhO1FBQ3ZCLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Q0FDSjs7OztBQUdELE1BQU0sT0FBTyx3QkFBd0I7Ozs7O0lBQzFCLE1BQU0sQ0FBQyxLQUFjO1FBQ3hCLE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBRU0sTUFBTSxDQUFDLEtBQWE7UUFDdkIsSUFBSSxLQUFLLEtBQUssTUFBTSxFQUFFO1lBQ2xCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxJQUFJLEtBQUssS0FBSyxPQUFPLEVBQUU7WUFDbkIsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0NBQ0o7Ozs7QUFHRCxNQUFNLE9BQU8sdUJBQXVCOzs7OztJQUN6QixNQUFNLENBQUMsS0FBYTtRQUN2QixPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7OztJQUVNLE1BQU0sQ0FBQyxLQUFhOztjQUNqQixZQUFZLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUVsQyxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ3BFLENBQUM7Q0FDSjs7Ozs7QUFHRCxNQUFNLE9BQU8sa0JBQWtCLEdBQUc7Ozs7SUFFOUIsSUFBSSxFQUFFLG1CQUFBLElBQUkscUJBQXFCLEVBQUUsRUFBMEI7Ozs7SUFHM0QsTUFBTSxFQUFFLG1CQUFBLElBQUksdUJBQXVCLEVBQUUsRUFBNkI7Ozs7SUFHbEUsT0FBTyxFQUFFLG1CQUFBLElBQUksd0JBQXdCLEVBQUUsRUFBOEI7Ozs7SUFHckUsTUFBTSxFQUFFLG1CQUFBLElBQUksdUJBQXVCLEVBQUUsRUFBNkI7Q0FDckUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9yYWdlVHJhbnNjb2RlciB9IGZyb20gJy4vc3RvcmFnZS10cmFuc2NvZGVyJztcblxuLyoqIFRyYW5zY29kZXIgdGhhdCBlbmNvZGVzIHZhbHVlcyBhcyBKU09OIHN0cmluZ3MuICovXG5leHBvcnQgY2xhc3MgSnNvblN0b3JhZ2VUcmFuc2NvZGVyIGltcGxlbWVudHMgU3RvcmFnZVRyYW5zY29kZXI8YW55PiB7XG5cbiAgICBwdWJsaWMgZW5jb2RlKHZhbHVlOiBhbnkpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZWNvZGUodmFsdWU6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbi8qKiBUcmFuc2NvZGVyIHRoYXQgZW5jb2Rlcy9kZWNvZGVzIHN0cmluZ3MgKiphcyBpcyoqLCBpLmUuIHZhbHVlcyBhcmUgbm90IG1vZGlmaWVkIGluIGFueSB3YXkuICovXG5leHBvcnQgY2xhc3MgU3RyaW5nU3RvcmFnZVRyYW5zY29kZXIgaW1wbGVtZW50cyBTdG9yYWdlVHJhbnNjb2RlcjxzdHJpbmc+IHtcbiAgICBwdWJsaWMgZW5jb2RlKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIGRlY29kZSh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cblxuLyoqIFRyYW5zY29kZXIgdGhhdCBlbmNvZGVzL2RlY29kZXMgYGJvb2xlYW5gIHZhbHVlcy4gKi9cbmV4cG9ydCBjbGFzcyBCb29sZWFuU3RvcmFnZVRyYW5zY29kZXIgaW1wbGVtZW50cyBTdG9yYWdlVHJhbnNjb2Rlcjxib29sZWFuPiB7XG4gICAgcHVibGljIGVuY29kZSh2YWx1ZTogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZWNvZGUodmFsdWU6IHN0cmluZyk6IGJvb2xlYW4gfCB1bmRlZmluZWQge1xuICAgICAgICBpZiAodmFsdWUgPT09ICd0cnVlJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID09PSAnZmFsc2UnKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cblxuLyoqIFRyYW5zY29kZXIgdGhhdCBlbmNvZGVzL2RlY29kZXMgYG51bWJlcmAgdmFsdWVzLiAqL1xuZXhwb3J0IGNsYXNzIE51bWJlclN0b3JhZ2VUcmFuc2NvZGVyIGltcGxlbWVudHMgU3RvcmFnZVRyYW5zY29kZXI8bnVtYmVyPiB7XG4gICAgcHVibGljIGVuY29kZSh2YWx1ZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGRlY29kZSh2YWx1ZTogc3RyaW5nKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgY29uc3QgcGFyc2VkTnVtYmVyID0gTnVtYmVyKHZhbHVlKTtcblxuICAgICAgICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKHBhcnNlZE51bWJlcikgPyBwYXJzZWROdW1iZXIgOiB1bmRlZmluZWQ7XG4gICAgfVxufVxuXG4vKiogQSBzZXQgb2Ygc3RvcmFnZSB0cmFuc2NvZGVycy4gKi9cbmV4cG9ydCBjb25zdCBTdG9yYWdlVHJhbnNjb2RlcnMgPSB7XG4gICAgLyoqIFRyYW5zY29kZXIgdGhhdCBlbmNvZGVzIHZhbHVlcyBhcyBKU09OIHN0cmluZ3MuICovXG4gICAgSlNPTjogbmV3IEpzb25TdG9yYWdlVHJhbnNjb2RlcigpIGFzIFN0b3JhZ2VUcmFuc2NvZGVyPGFueT4sXG5cbiAgICAvKiogVHJhbnNjb2RlciB0aGF0IGVuY29kZXMvZGVjb2RlcyBzdHJpbmdzICoqYXMgaXMqKiwgaS5lLiB2YWx1ZXMgYXJlIG5vdCBtb2RpZmllZCBpbiBhbnkgd2F5LiAqL1xuICAgIFNUUklORzogbmV3IFN0cmluZ1N0b3JhZ2VUcmFuc2NvZGVyKCkgYXMgU3RvcmFnZVRyYW5zY29kZXI8c3RyaW5nPixcblxuICAgIC8qKiBUcmFuc2NvZGVyIHRoYXQgZW5jb2Rlcy9kZWNvZGVzIGBib29sZWFuYCB2YWx1ZXMuICovXG4gICAgQk9PTEVBTjogbmV3IEJvb2xlYW5TdG9yYWdlVHJhbnNjb2RlcigpIGFzIFN0b3JhZ2VUcmFuc2NvZGVyPGJvb2xlYW4+LFxuXG4gICAgLyoqIFRyYW5zY29kZXIgdGhhdCBlbmNvZGVzL2RlY29kZXMgYG51bWJlcmAgdmFsdWVzLiAqL1xuICAgIE5VTUJFUjogbmV3IE51bWJlclN0b3JhZ2VUcmFuc2NvZGVyKCkgYXMgU3RvcmFnZVRyYW5zY29kZXI8bnVtYmVyPlxufTtcbiJdfQ==